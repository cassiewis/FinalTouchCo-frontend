import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatNativeDateModule } from '@angular/material/core'; // for date picker functionality
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { Product } from '../../../models/product.model';
import { ProductService } from '../../../services/product.service';
import { AdminProductService } from '../../admin-services/admin-product.service';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatSnackBar } from '@angular/material/snack-bar';  // Import Snackbar
import { MATERIALS, EVENT_TYPES, CATEGORIES } from '../../../shared/constants';

@Component({
  selector: 'app-admin-add-product',
  standalone: true,
  imports: [
    CommonModule, 
    FormsModule,
    MatFormFieldModule, 
    MatInputModule, 
    MatCheckboxModule, 
    MatButtonModule, 
    MatDatepickerModule, 
    MatNativeDateModule, 
    ReactiveFormsModule
  ],
  templateUrl: './admin-add-product.component.html',
  styleUrl: './admin-add-product.component.css'
})
export class AdminAddProductComponent {
  popupOpen: boolean = false;
  product: Product = {
    type: 'Product',
    productId: '',
    active: false,
    custom: false,
    quantity: 1, 
    name: '', 
    price: 0,
    deposit: 0,
    description: '', 
    imageUrl: '',
    datesReserved: [],
    tags: [],
    material: ''
  }
  imageUrlAutoGenerated: boolean = true;

  eventTypes = EVENT_TYPES;
  categories = CATEGORIES;
  materials = MATERIALS;

  constructor(
    private productService: ProductService,
    private adminProductService: AdminProductService,
    private snackBar: MatSnackBar){}

  openProductCreator() {
    this.popupOpen = true;
  }

  closeProductCreator() {
    this.popupOpen = false;
  }

  // Check if a tag is selected
  isTagSelected(tag: string): boolean {
    return this.product.tags?.includes(tag) || false;
  }

  // Toggle tag selection
  toggleTag(tag: string, isChecked: boolean): void {
    if (!this.product.tags) {
      this.product.tags = [];
    }
    
    if (isChecked) {
      // Add tag if not already present
      if (!this.product.tags.includes(tag)) {
        this.product.tags.push(tag);
      }
    } else {
      // Remove tag
      this.product.tags = this.product.tags.filter(t => t !== tag);
    }
  }

  createProduct() {
    // todo add upload option for photos
    
    this.adminProductService.addProduct(this.product).subscribe(
      (response: Product) => { // Specify the response type
        console.log('Product added successfully:', response);
        this.closeProductCreator();
        window.location.reload();
        // additional logic here, e.g., updating UI or navigating to another page
      },
      (error: any) => { // Specify the error type as any
        console.error('Error adding product:', error);
        this.displayError(error);
        // error handling logic
      }
    );

  }

  displayError(error: any): void {
    let errorMessage = 'An error occurred while processing your reservation.';

    // Customize the error message based on the error response if available
    if (error && error.message) {
      errorMessage = error.message;
    }

    // Display the error message using Snackbar
    this.snackBar.open(errorMessage, 'Close', {
      duration: 5000,  // The snackbar will automatically close after 5 seconds
      verticalPosition: 'top',
      horizontalPosition: 'center'
    });
  }

}
